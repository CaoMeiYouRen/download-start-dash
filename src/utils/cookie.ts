import path from 'path'
import fs from 'fs-extra'
import { to } from 'await-to-js'
import { COOKIE_CLOUD_PASSWORD, COOKIE_CLOUD_URL, COOKIES_PATH } from '@/env'
import logger from '@/middlewares/logger'

export async function getCloudCookie(url: string, password: string): Promise<any> {
    const payload = JSON.stringify({ password })
    const response = await fetch(url, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: payload,
    })
    return response.json()
}

interface Cookie {
    domain: string
    expirationDate: number
    hostOnly: boolean
    httpOnly: boolean
    name: string
    path: string
    sameSite: string
    secure: boolean
    session: boolean
    storeId: string
    value: string
}

function serializeCookie(cookie: Cookie): string {
    const { domain, hostOnly, path: cookiePath, secure, expirationDate, name, value } = cookie
    return [domain, !hostOnly, cookiePath, secure, Math.floor(expirationDate) || 0, name, value].map((e) => {
        if (typeof e === 'boolean') {
            return String(e).toUpperCase()
        }
        return String(e)
    }).join('\t')
}

/**
 * 从 CookieCloud 获取 cookie 并写入到文件
 *
 * @author CaoMeiYouRen
 * @date 2024-08-27
 * @export
 * @param data
 */
export async function cloudCookie2File(data: any) {
    try {
        for (const [key, cookies] of Object.entries(data.cookie_data)) {
            let cookieFileContent = '# Netscape HTTP Cookie File\n'
            cookieFileContent += '# http://curl.haxx.se/rfc/cookie_spec.html\n'
            cookieFileContent += '# This file was generated by CaoMeiYouRen/download-start-dash\n'
            for (const cookie of (cookies as any)) {
                cookieFileContent += `${serializeCookie(cookie)}\n`
            }
            await fs.writeFile(path.join(COOKIES_PATH, `${key}.txt`), cookieFileContent, 'utf-8')
        }

    } catch (error) {
        console.error('Unexpected error:', error)
    }
}

export async function syncCloudCookie() {
    if (COOKIE_CLOUD_URL) {
        logger.info('正在获取 Cookie')
        const [cookieError, data] = await to(getCloudCookie(COOKIE_CLOUD_URL, COOKIE_CLOUD_PASSWORD))
        if (cookieError) {
            logger.error('获取 Cookie失败！\n', cookieError.stack)
            return
        }
        if (data) {
            await cloudCookie2File(data)
            logger.info('获取 Cookie 成功')
        }
    }
}

/**
 * 获取主域名
 *
 * @author CaoMeiYouRen
 * @date 2024-08-27
 * @param domain
 */
export function extractMainDomain(domain: string) {
    // 移除协议部分（如http:// 或 https://）
    domain = domain.replace(/(^\w+:|^)\/\//, '')

    // 移除路径部分
    domain = domain.split('/')[0]

    // 使用正则表达式提取主域名
    const parts = domain.split('.')
    const tld = parts.pop() // 假设最后一个部分是顶级域名（TLD）
    const sld = parts.pop() // 假设倒数第二个部分是二级域名（SLD）

    // 组合主域名
    const mainDomain = `${sld}.${tld}`

    return mainDomain
}

export async function getCookiePath(host: string) {
    // 先查找完整域名的 cookie
    let cookiePath = path.resolve(COOKIES_PATH, `${host}.txt`)
    if (await fs.pathExists(cookiePath)) {
        return cookiePath
    }
    // 再查找主域名的 cookie
    cookiePath = path.resolve(COOKIES_PATH, `${extractMainDomain(host)}.txt`)
    if (await fs.pathExists(cookiePath)) {
        return cookiePath
    }
    // 未查找到返回空
    return ''
}
